[
{
"step_title": "Licence",
"invalid_next_disabled": true,
"items": [{
    "type": "multiselect",
    "desc": "BSD 3-Clause License<br><br>Copyright (c) 2011-2023, Jan Reidemeister and Horst Schmid<br>All rights reserved.<br><br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br><br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "subitems": [
     {
      "key": "id1",
      "desc": "Accepted",
      "defaultValue": false,
      "validator": {
        "fn": "{var v=arguments[0]; if (!v) return '@notAccepted@'; return true;}"
        }
      }
     ]
    }
   ]
  }
, {
  "step_title": "Configuration",
   "items": [
    {"type": "textfield",
    "desc": "<strong>Please scroll through all items before clicking to 'Next'</strong><br><br><strong>Script: </strong><br>There are two posibilities for the location of the script, which should be executed after device connect:<br>a) The script is located in the root directory of the external storage device. No action for devices without such a script. For this enter the name of your script without path, without '/'.<br>b) The script is on your DSM. And will be started at any storage device connect. Enter the full name with path, e.g. '/volume1/mysyn/auto.sh'.<br>The script must be executable for the user 'root'. The script will get the mount point of the device (e.g. /volumeUSB1/usbshare/) as the first parameter (\\$1) and the device partition (e.g. usb1p1) as the second (\\$2). Hints: The script is started with an <b>empty environment</b>, you have to specify all the used commands with path! The script name is case sensitive!",
    "subitems": [{
      "key": "config_SCRIPT"
      ,"desc": "Script to execute"
      ,"width": "350"
      ,"defaultValue": "@SCRIPT@"
      ,"emptyText": "Script name"
      ,"validator": { "allowBlank": false }
      }]
    }
  ,{
    "type": "textfield",
    "desc": "<strong>Timing: </strong><br>The search time is the time after the 'external storage connected' event for finding the mount point. The additional wait time gives the DSM some leeway to properly mount the drive before starting the script.<br/>You may need to increase those times depending on your hardware. ",
    "subitems": [
     {
      "key": "config_TRIES"
      ,"desc": "Search timeout (sec)"
      ,"defaultValue": "@TRIES@"
      ,"emptyText": "time to get the mount path"
      ,"validator": { 
        "allowBlank": false
        ,"regex": {
          "expr": "/^[0-9]+$/"
          ,"errorText": "Enter a positive number"
          }
        }
      }
    ,{
      "key": "config_WAIT"
      ,"desc": "Delay time (sec)"
      ,"defaultValue": "@WAIT@"
      ,"emptyText": "delay for script start after mount path was found"
      ,"validator": { 
        "allowBlank": false
        ,"regex": {
          "expr": "/^[0-9]+$/"
          ,"errorText": "Enter a positive number"
          }
        }
      }
     ]
    }
  ,{
    "type": "textfield",
    "desc": "<strong>Logging: </strong><br>The size of the log files is automatically limitted. If the given line count is reached, the elder half is removed.",
    "subitems": [
      {
        "key": "config_LOG_MAX_LINES"
        ,"desc": "Max. line count"
        ,"defaultValue": "@LOG_MAX_LINES@"
        ,"validator": { 
          "allowBlank": false
          ,"regex": {
            "expr": "/^[0-9]+$/"
            ,"errorText": "Enter a positive number"
            }
          }
        }
      ]
    }
  ,{
    "type": "textfield",
    "desc": "Several debug log file message detail levels are available: 1 ... 8. The higher the value the more details.",
    "subitems": [
      {
        "key": "config_LOGLEVEL"
        ,"desc": "Log Detail Level"
        ,"defaultValue": "@LOGLEVEL@"
        ,"validator": { 
          "allowBlank": false
          ,"regex": {
            "expr": "/^[0-8]$/"
            ,"errorText": "Enter a positive number 1 ... 8"
            }
          }
        }
      ]
    }
    ,{
      "type": "combobox",
      "desc": "The output of your scripts to stdout, e.g. with the echo command, can be captured and written also to a logfile",
      "subitems": [{
        "key": "config_CAPTURE",
        "autoSelect": true,
        "editable": false,
        "desc": "stdout capture",
        "width": "350",
        "mode": "local",
        "valueField": "myId2",
        "displayField": "displayText",
        "defaultValue": "@CAPTURE@",
        "store": {
          "xtype": "arraystore",
          "fields": ["myId2", "displayText"],
          "data": [[0, "0 Not captured"], [1, "1 inserted to autorun main log"], [2, "2 inserted to autorun debug log"]]
          }
        }]
      }
    ,{
    "type": "textfield"
    ,"desc": "<strong>Desktop Messages: </strong><br>The package generates DSM desktop messages, which are shown on the desktop to a configurable user group or to a user. Prepend an @ to group names, e.g. @users for all users"
    ,"subitems": [{
      "key": "config_NOTIFY_USERS"
      ,"desc": "Message display to"
      ,"width": "350"
      ,"defaultValue": "@NOTIFY_USERS@"
      ,"validator": { "allowBlank": true }
      }]
    }
  ,{
    "type": "textfield"
    ,"desc": "Normally there is a DSM desktop message generated after your script is finished with the exit code and the free space. You may specifiy here an exit code, which does not generate such a message. Typical usage for this: You are using a script on your DSM, not on the external device. And your script has some type of 'device filter' and exits with the here specified code, with no further actions and no message for some of your external devices."
    ,"subitems": [{
      "key": "config_NO_DSM_MESSAGE_RETURN_CODES"
      ,"desc": "Return codes w/o message"
      ,"width": "350"
      ,"defaultValue": "@NO_DSM_MESSAGE_RETURN_CODES@"
      ,"emptyText": "e.g. 90;95-99"
      ,"validator": {
        "allowBlank": true
        ,"regex": {
          "expr": "/^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:[-;]([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))*$/"
          ,"errorText": "Enter one or more numbers 0..255, seperated by semicolon or hyphen. Or leave it empty"
          }
        }
      }]
    }
  ,{
    "type": "textfield"
    ,"desc": "<strong>LEDs and BEEP:</strong><br/>You may want to use the Copy-LED, Status-LED and the beeper to indicate a running script. And also whether it had success or it was failing. Or whether the later configured optional device ejection was successfully.<br/>Which of your script exit codes should be considered as a failure?"
    ,"subitems": [{
      "key": "config_FAILURE_CODES"
      ,"desc": "Failure return codes"
      ,"width": "350"
      ,"defaultValue": "@FAILURE_CODES@"
      ,"emptyText": "e.g. 1-80;120-255"
      ,"validator": {
        "allowBlank": true
        ,"regex": {
          "expr": "/^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:[-;]([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))*$/"
          ,"errorText": "Enter one or more numbers 0..255, seperated by semicolon or hyphen. Or leave it empty"
          }
        }
      }]
    }
  ,{
    "type": "combobox",
    "desc": "Use of 'Copy LED':<br/>0: This LED is not used at all by this package.<br/>1: ON while running or ejecting, OFF afterwards<br/>2: flashing while running or ejecting, OFF afterwards<br/>3: ON while running or ejecting, afterwards OFF or flashing to indicate a failure<br/>4: flashing while running or ejecting, afterwards OFF (success) or flashing (failure)<br/>5: flashing while running or ejection, afterwards OFF (success) or ON (failure)",
    "subitems": [{
      "key": "config_LED_COPY",
      "autoSelect": true,
      "editable": false,
      "desc": "Copy LED",
      "defaultValue": "@LED_COPY@",
      "width": "350",
      "mode": "local",
      "valueField": "myId",
      "displayField": "displayText",
      "store": {
        "xtype": "arraystore",
        "fields": ["myId", "displayText"],
        "data": [[0, "0 Not used"], [1, "1 ON - ON - OFF"], [2, "2 flash - flash - OFF"], [3, "3 ON - ON - OFF or flash"], [4, "4 flash - flash - OFF or flash"], [5, "5 flash - flash - OFF or ON"]]
        }
      }]
    }  
  ,{
    "type": "combobox",
    "desc": "Use of status LED:<br/>0: Not used at all<br/>1: Green while running, green flashing during eject, OFF (success), orange flashing (failure)<br/>2: Green flashing while script is running or ejecting, green if finished (success) or orange flashing (failure)<br/>3: Green while script is running and during eject, OFF (success), orange flashing (failure)",
    "subitems": [{
      "key": "config_LED_STATUS",
      "autoSelect": true,
      "editable": false,
      "desc": "Status LED",
      "width": "350",
      "mode": "local",
      "valueField": "myId",
      "displayField": "displayText",
      "defaultValue": "@LED_STATUS@",
      "store": {
        "xtype": "arraystore",
        "fields": ["myId", "displayText"],
        "data": [[0, "0 Not used"], [1, "1 grn - grnFlash - OFF or orgFlash"], [2, "2 grnFlash - grnFlash - grn or orgFlash"], [3, "3 grn - grn - OFF or orgFlash"]]
        }
      }]
    }
  ,{
    "type": "multiselect",
    "desc": "<br/>Beeper use by the script: Short beep at begin and end, tripple long beep for an failure",
    "subitems": [{
      "key": "config_BEEP",
      "desc": "Beep at start and end",
      "defaultValue": "@BEEP@"
      }]
    }
    ,{
      "type": "textfield"
      ,"desc": "<strong>Eject: </strong><br>For the here specified return codes of your script the external storage device will be ejected after the script is finished. E.g. '100;111-119;255'."
      ,"subitems": [{
        "key": "config_EJECT_RETURN_CODES"
        ,"desc": "Return codes for EJECT"
        ,"width": "350"
        ,"defaultValue": "@EJECT_RETURN_CODES@"
        ,"emptyText": "e.g. 100;110-119"
        ,"validator": {
          "allowBlank": true
          ,"regex": {
            "expr": "/^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:[-;]([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))*$/"
            ,"errorText": "Enter one or more numbers 0..255, seperated by semicolon or hyphen. Or leave it empty"
            }
          }
        }]
      }
    ,{
    "type": "textfield"
    ,"desc": "The above specified exit codes from the script will unmount and eject the device when the script is finished. All other exit values will leave it mounted.<br/><br/>When trying to eject the device, the drive may still be in use. You can specify the timeout (in seconds) for ejecting the device"
    ,"subitems": [{ 
      "key": "config_EJECT_TIMEOUT"
      ,"desc": "Eject Timeout [s]"
      ,"defaultValue": "@EJECT_TIMEOUT@"
      ,"validator": { 
        "allowBlank": false
        ,"regex": {
          "expr": "/^[0-9]+$/"
          ,"errorText": "Enter a positive number"
          }
        }
      }]
    }  
  ,{
    "type": "textfield",
    "desc": "Hint: In some cases the ejection may seem to be successfully but not really well done. And the device will probably not be well mounted at the next connect. This was observed for devices with the BTRFS file system, which have been used in a during eject still running docker container using that mount path.<br><br>You can optionally specify a further script (with full path!), which is executed after the ejection. This may be used e.g. to power down your USB device. If ejection failed, the argument will be 'Ejection failed', at success no argument!",
    "subitems": [{
      "key": "config_SCRIPT_AFTER_EJECT"
      ,"desc": "Script after eject (on DSM)"
      ,"width": "350"
      ,"defaultValue": "@SCRIPT_AFTER_EJECT@"
      ,"emptyText": "Script name (optional)"
      ,"validator": {
        "allowBlank": true
        }
      }]
    }
    ]
  }
,{
  "step_title": "Security Configuration",
  "items": [{
    "type": "combobox",
    "desc": "The script with the matching name is exectuted with root priviledges on your DSM! That could be a security risk, especially it its located on the external device! For better security a restriction to scripts with pre-registered sha256 hash values (finger prints) is possible.<br/><b>Currently there are @ENTRY_COUNT@ script hashes registerd.</b><br/>0: This security feature is not used. All scripts with matching name are allowed. No change of possibly previously registered hashes.<br/>1: @HASH_DELETION@The 1st script after installation/configuration will be registered and is allowed to execute then again and again. Other scripts are denied.<br/>2: The hash value of any script with matching name will be added to the registered scripts and executed! If you use this now, you should change that configuration later to value 3!<br/>3: Only previously registered scripts are allowed to execute. The registration is frozen.",
    "subitems": [{
      "key": "config_ADD_NEW_FINGERPRINTS"
      ,"autoSelect": true
      ,"editable": false
      ,"desc": "Script Hash registration"
      ,"width": "350"
      ,"mode": "local"
      ,"valueField": "myId"
      ,"displayField": "displayText"
      ,"defaultValue": "@ADD_NEW_FINGERPRINTS@"
      ,"store": {
        "xtype": "arraystore"
        ,"fields": ["myId", "displayText"]
        ,"data": [[0, "0 Feature not used (unrestricted)"], [1, "1 1st script allowed"], [2, "2 Add any new hash value"], [3, "3 Only previously registered"]]
        }
      ,"validator": { 
        "regex": {
          "expr": "/^[@SECURITY_RANGE@].*/"
          ,"errorText": "With no previously registered hashes the selection '3' makes no sense"
          }
        }
      }]
    }]
  } 
]

