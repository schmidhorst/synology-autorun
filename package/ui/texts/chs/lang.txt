#!/bin/bash
# This file was generated via DeepL machine translation from en
# Filename: <lng>/lang.txt - coded in utf-8
# Language variables for cgi pages in the user language
# --------------------------------------------------------------
displaynameINFO="自动运行"
descriptionINFO="当外部驱动器（USB/eSATA）连接到磁盘站时，在其上执行一个脚本。"
LoginRequired="需要登录"
PleaseLogin="在使用本网页之前，请先以管理员身份登录。"
settingsTitle="实际的$app_name设置。"
logTitleExec="行动日志（设备附件、脚本执行和设备弹出）。"
logTitleDetail="活动的调试日志。实际的日志级别是'$LOGLEVEL'。"
fingerprint0="任何外部驱动器上名称为\"/$SCRIPT \"的脚本都将被执行。在这个设置下，对一些哈希值没有限制。这可能是一个安全风险!"
fingerprint1count0="当一个带有脚本\"/$SCRIPT \"的外部存储器被连接时，该脚本的哈希值将被注册，并且该脚本将被执行。在这个设置下，不允许再有任何哈希值。"
fingerprint1count1="由于已经注册了脚本'/$SCRIPT'的哈希值，因此只有具有该哈希值的脚本才允许在此设置下执行。"
fingerprint2="实际上，有$ENTRY_COUNT哈希值的脚本，其名称为'$SCRIPT'，已注册并允许执行。"
fingerprint3="当一个带有脚本\"/$SCRIPT \"的外部存储器被连接时，哈希值将被注册，脚本将被执行。"
settingScript="该脚本必须位于设备的根目录下，并设置为用户 \"root \"可执行。它获取设备的挂载点作为第一个参数（1），设备作为第二个参数（2）。"
scriptAfter="如果外部存储设备上的脚本以退出代码100退出，那么autorun将弹出该存储设备，之后再调用该脚本。"
scriptAfterNone="如果外部存储设备上的脚本以退出代码100退出，那么autorun将弹出该存储设备。之后，这里指定的脚本（在NAS上）可以被执行。例如，在智能电源插座的帮助下，你可以关闭外部设备的电源。"
tries1="自动运行的时间（以秒为单位），应该在多长时间内搜索一个已安装的驱动器。当你遇到 \"无法找到挂载点 \"的错误时，增加这个值。"
wait1="在启动脚本之前，检测到安装后有一个额外的等待时间（秒）。"
beep1="如果设置为 \"true\"，当找到一个脚本时，会有一声短促的哔哔声。而在出错的情况下会发出三倍的长鸣声"
led1="如果不为零，那么这个包就使用了状态LED。"
ledCopy1="如果不为零，那么这个包就会使用状态拷贝LED。"
ejectTimeout1="如果在退出代码100的情况下，外部驱动器不能被弹出（因为它很忙），这就给出了错误终止前的超时时间（秒）。"
logMaxLines1="为了避免日志文件占用过多的空间，如果行数达到给定的数字，则删除文件的前一半。"
logVerbose1="调试日志文件信息有几个详细的级别可供选择。0 ...8.值越高，细节越多。"
notifyUsers1="该软件包生成桌面通知，显示给可配置的用户或用户组。带\"@\"的名字是组名。"
runInstallationAgain="你可以再次运行安装程序来改变设置!"
ledCtrlHint="如果LED指示仍然是一个错误，你可以在这里重置。"
btnCopyLedOff="拷贝LED关闭"
btnStatusLedGreen="状态指示灯绿色"
btnStatusLedOff="状态指示灯关闭"
btnDelLog="删除这个日志文件"
btnRefresh="刷新页面"
btnShowDetailLog="显示详细的调试日志文件"
btnShowSimpleLog="显示简单的日志"
hrefLog="行动日志"
btnShowLicence="许可证"
btnShowSettings="显示设置"
btnDownload="下载 ..."
execLogNA="没有找到日志文件或者是空的。在启动该软件包后，根文件夹中是否已经有一个带有脚本文件的存储设备？"
copyPriviledge="你可以通过SSH执行所需的命令 <input type='text' size='80' value='sudo cp /var/packages/$SYNOPKG_PKGNAME/conf/privilege.root /var/packages/$SYNOPKG_PKGNAME/conf/privilege'> <strong>现在！</strong> 'OK'之后，你可以用'运行'启动软件包。"
scriptAfterNA="警告。无法找到应该在设备弹出后执行的Skript '$scriptAfterEject'!"
scriptAfterNexec="警告。应该在设备弹出后执行的Skript '$scriptAfterEject'是不可执行的!"
wrongLineBreakWin="错误。应该执行的 Skript '$scriptAfterEject'使用了错误的换行符CR/LF（Windows）。请使用一个可编辑的编辑器（Linux oder Windows Notepad  , PSPad, ...），将其改为LF（UNIX）!"
wrongCodePage="错误。应该执行的 Skript '$scriptAfterEject' 使用了错误的编码（Windows ISO-8859）。请使用一个可识别的编辑器（Linux oder Windows Notepad  , PSPad, ...），将其改为UTF-8!"
wrongLineBreakMac="错误。应该执行的 Skript '$scriptAfterEject'，使用了错误的换行符（MAC）。请使用一个可编辑的编辑器将其改为LF（UNIX）!"
notifyUserError="桌面信息的用户账户'$notyfyUsers'并不存在!因此，错误的条目被'@users'组取代。再次运行安装程序，输入另一个值!"
notifyGroupError="桌面信息的用户组'$notyfyUsers'并不存在!因此用'@users'替换了错误的条目。再次运行安装程序，输入另一个值!"
noDsmMessageReturnCodes="通常情况下，在你的脚本完成后会有一条DSM桌面信息产生。这个信息包含了你的脚本的返回代码和存储设备上的剩余空间。如果你的脚本以这里给出的代码之一退出，那么就不会产生这样的消息。在软件包的日志文件中仍然会产生一个条目。"
update_available="<span style='color:red'>GitHub上有一个${app_name}的更新。</span>请将您的版本${local_version}更新为版本"
txtAlertOnlyAdmin="只允许管理员组的成员访问。"
txtLanguageSource="本页的语言是根据你的网络浏览器区域设置选择的。"
preinstDsmVersError="这个软件包版本只能在DSM ${osMin}及以上版本中使用!在你的DSM版本上可能会有更早的软件包版本，见<a target='_blank' rel='noopener noreferrer' href='https://github.com/reidemei/synology-autorun#install'>https://github.com/reidemei/synology-autorun#install</a>。"
elog01="脚本'$SCRIPT'在'$diskName'上，以$MOUNTPATH挂载，被启动并正在运行 ..."

