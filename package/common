#!/bin/bash


# set the led or send a beep
# https://kb.synology.com/de-de/DSM/tutorial/Overview_of_LED_indicator_statuses_during_bootup
#   $1 - event (see http://www.synology-wiki.de/index.php/LEDs_und_Buttons)
# 1 	0x31 	power off
# 2 	0x32 	kurzer Pieps-Ton
# 3 	0x33 	langer Pieps-Ton
# 4 	0x34 	Power LED (blau) an
# 5 	0x35 	Power LED (blau) blinken (hoch/runterfahren)
# 6 	0x36 	Power LED aus
# 7 	0x37 	Status LED aus
# 8 	0x38 	Status LED grün an (Normalzustand)
# 9 	0x39 	Status LED grün blinkend (DSM nicht bereit)
# : 	0x3A 	Status LED orange an (?)
# ; 	0x3B 	Status LED orange blinkend (Fehler)
# @ 	0x40 	Copy LED an
# A 	0x41 	Copy LED blinkend
# B 	0x42 	Copy LED aus 

#shellcheck disable=2034
BEEP_SHORT=2
BEEP_LONG=3
# LED_POWER_FLASH=5
LED_STATUS_OFF=7
LED_STATUS_GREEN=8 # Default state while DSM is ON
LED_STATUS_GREEN_FLASH=9
LED_STATUS_ORANGE=:
LED_STATUS_ORANGE_FLASH=;
LED_COPY_ON=@
LED_COPY_FLASH=A
LED_COPY_OFF=B
NO_DSM_MESSAGE_RETURN_CODES=""

beep() {  # also used for LED control
  # requires root!
  /bin/echo "$1" > /dev/ttyS1 # on virtual DSM: write error: Input/output error
  #synoexternal  -susled disk_green/disk_orange/power none/steady/blink
}


beepError() {  # 3 times long beep
  beep 3
  /bin/sleep 1s
  beep 3
  /bin/sleep 1s
  beep 3
  /bin/sleep 1s
}

# Check whether file $1 exists: Result 0: yes, identical name, 1: upper/lower case is different, 2: no
# The -iname item of find command is not allowed to contain '/' ==> need to loop through path elements!
# not yet supported: multiple directories with same ignore-case-name

# shell option nocaseglob is only working for parts with wildcard!!!!!!
# https://unix.stackexchange.com/questions/16516/shopt-s-nocaseglob-is-not-working-on-ubuntu
# https://unix.stackexchange.com/questions/60162/how-to-make-cd-arguments-case-insensitive
findFileIgnoreCase() {
  if [[ -f "$1" ]]; then # if no support for possibly multiple results is required, e.g. log, Log, LOG this shortcut can be used!
    return 0 # identical
  fi
  filePath="$(dirname "$1")"
  fileName="$(basename "$1")"
  # echo "path='$filePath', name='$fileName'"
  if [[ "${filePath:0:1}" == "/" ]]; then
    file="/"
    filePath=${filePath:1}
    #echo "$filePath"
  else
    file=""
  fi
  mapfile -d "/" -t pathItems  < <(/bin/printf '%s' "$filePath") # if called from udev: /bin/ required for printf!!!
  # mapfile -d "/" -t pathItems  <<< "$filePath" # here string appends an newline to last element
  # pathItems[-1]=$(echo "${pathItems[-1]}" | sed -z 's|\n$||' ) # remove the \n which was appended to last item by "<<<"
  found=1
  #echo "path item count ${#pathItems[@]}"
  for ((i=0; i<${#pathItems[@]}; i+=1)); do # check path
    #echo "file='$file', item='${pathItems[$i]}':"
    res="$(find -L "$file" -maxdepth 1 -iname "${pathItems[$i]}" -type d)" # -L Follow symbolic links
    #echo "$file${pathItems[$i]}: res='$res'"
    if [[ -n "$res" ]]; then
      # missing here is the support for multiple results, e.g. log, Log, LOG
      file="$res/"
    else
      #echo "not existing"
      echo ""
      found=0
      break
    fi
  done
  if [[ "$found" -eq "1" ]]; then # check basename
    res="$(find "$file" -iname "$fileName" -type f)"
    if [[ -n "$res" ]]; then
      echo "$res"
      # missing here is the support for multiple results, e.g. log, Log, LOG
      if [[ "$res" == "$1" ]]; then
        return 0 # identical
      else
        return 1 # case different
      fi
    fi
  fi
  return 2 # not found
}


# if the file $1 has more than $2 lines: Delete the 1st $2/2 lines
logfileTrim() {
  f2="$1"
  f2="$(readlink "$1")" # result 1 if it's not a link, 0 if its a link
  noLink=$?
  if [[ -f "$f2" ]]; then
    lineCount=$(/bin/wc -l < "$f2")
    logInfo 6 "The log file '$f2' exists and has $lineCount lines, configured maximum is $LOG_MAX_LINES"
    if [[ "$lineCount" -gt "$LOG_MAX_LINES" ]]; then
      newLineCount=$((LOG_MAX_LINES / 2))
      lastdeline=$((lineCount - newLineCount))
      # lastdeline=5 # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! for debugging set!!!!
      res="$( { /bin/sed -i -e "1,${lastdeline}d" "$f2"; } 2>&1 )"
      ret=$?
      if [[ "$ret" -ne "0" ]]; then
        logError "Error $ret to cut down log file '$f2' from $lineCount to $newLineCount lines with sed: '$res'"
      else
        echo "The log file '$f2' was trimmed from $lineCount to $newLineCount lines"
      fi # if [[ "$ret" -ne "0" ]] else
    fi # if [[ "$lineCount" -gt "$LOG_MAX_LINES" ]]
  fi # if [[ -f "$f2" ]]
}


####################### start #############################
if [[ -z "$PATH" ]]; then
  PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/syno/bin:/usr/syno/sbin
fi
SCRIPTPATHTHIScommon="$( cd -- "$(/bin/dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 ; /bin/pwd -P )" # e.g. /volumeX/@appstore/<app>
# Attention: In case of "source <somePath>/common" don't overwrite here the previous SCRIPTPATHTHIS!
if [[ -z "${app_name}" ]]; then
  app_name="${SCRIPTPATHTHIScommon##*/}"
fi
APPDATA="/var/packages/$app_name/var" # appCfgDataPath="/var/packages/${app_name}/var"
LOGLEVEL=8 # preset, may be chanded in parse_hlp.sh from config 
# shellcheck source=../WIZARD_UIFILES/log_hlp.sh
source "/var/packages/$app_name/WIZARD_UIFILES/log_hlp.sh"
# shellcheck source=ui\modules\parse_hlp.sh
source "/var/packages/$app_name/target/ui/modules/parse_hlp.sh" #  logInfoNoEcho(), DTFMT, LOGLEVEL, urlencode(), urldecode()
SCRIPT_EXEC_LOG="$APPDATA/execLog"

# shellcheck source=..\WIZARD_UIFILES\initial_config.txt
source "$APPDATA/config"
if [[ -z "$LOG" ]]; then # should be set in log_hlp.sh!!!!!
  if [[ -w "/var/log/packages/autorun.log" ]]; then
    LOG="/var/log/packages/autorun.log"
  fi
  ## LOG="/var/packages/$app_name/target/log"
  # LOG="$APPDATA/log" # equal to /volumeX/@appdata/<app>
  # LOG="/var/log/packages/$app_name.log" # permission denied
  # /var/log/$app_name.log: Permission denied
  if [[ -z "$LOG" ]]; then
    LOG="/var/tmp/$app_name.log"
  fi
  logInfo 2 "LOGFILE was not set! Now='$LOG'"
fi
# A link /var/packages/$SYNOPKG_PKGNAME/var/detailLog to $LOG is set to this (see start-stop-status script)
logInfo 7 "common (${BASH_SOURCE[0]}) was called with param1='$1', app_name='$app_name', APPDATA='$APPDATA', SCRIPTPATHTHIScommon='$SCRIPTPATHTHIScommon'"
lngUser=$SYNOPKG_DSM_LANGUAGE # not global DSM language but actual user language! Never 'def'
lngMail=$(/bin/get_key_value "/etc/synoinfo.conf" "maillang") # global setting, not individual user!
if [[ -z "$lngUser" ]]; then
  logInfo 5 "common: SYNOPKG_DSM_LANGUAGE is not available, trying maillang='$lngMail'"
  lngUser="$lngMail"  
fi
if [[ ! -f "/var/packages/$app_name/target/ui/texts/$lngUser/lang.txt" ]]; then
  logInfo 5 "common: /var/packages/$app_name/target/ui/texts/$lngUser/lang.txt not available, switched to enu"
  lngUser="enu"
fi
user=$(whoami) # EnvVar $USER may be not well set
logInfo 7 "common done: user='$user', SYNOPKG_DSM_LANGUAGE='$SYNOPKG_DSM_LANGUAGE', lngMail='$lngMail', selected lngUser='$lngUser'"

