#!/bin/bash
# Filename: enu/lang.txt - coded in utf-8
# Language variables for dialog pages
# --------------------------------------------------------------
LoginRequired="Login Required"
PleaseLogin="Please login as admin first, before using this webpage"
settingsTitle="Actual $app_name Settings:"
logTitleExec="Log of actions (device attachment, script execution and device ejection)"
logTitleDetail="Detail log of the activities";
fingerprint0="Any script with the name '/$SCRIPT' on external drive will be execute. No restriction to some hash values with this setting. This may be a security risk!"
fingerprint1count0="When a external storage with an script '/$SCRIPT' is attached, then the hash value of the script will be registered and the script will be executed. No further hash values will be allowed with this setting."
fingerprint1count1="As already a hash value of the script '/$SCRIPT' is registered, only scripts with that hash value are alowed to execute with this setting."
fingerprint2="Actually there are $ENTRY_COUNT hash values of scripts with the name '$SCRIPT' registered and allowed to execute."
fingerprint3="When a external storage with an script '/$SCRIPT' is attached the hash value will be registered and the script will be executed."
script1="The script must be located in the root directory of the device and set as executable for the user 'root'. It gets the mount point of the device as the first parameter (\$1) and the device as the second (\$2)."
scriptAfter="If the script on the external storage device exits with the exit code 100, then autorun will eject that storage device and afterwards call this script."
scriptAfterNone="If the script on the external storage device exits with the exit code 100, then autorun will eject that storage device. Afterwards the script (on the NAS) specified here can be executed. E.g. with the help of a smart power socket you may turn off the power of the external device."
tries1="The time (in seconds) how long autorun should search for a mounted drive. Increase this value when you get the \"unable to find mount point\" error."
wait1="An additional wait time (in secords) after mounting is detected before starting the script."
beep1="If set to true, there is a short beep when a script is found. And a tripple long beep in case of an error"
led1="If not zero, then the status LED is used by this package."
ledCopy1="If not zero, then the status copy LED is used by this package."
ejectTimeout1="If in cas of exit code 100 the externald drive cannot be ejected (as it's busy), this gives the timeout in seconds before terminating with error."
logMaxLines1="To avoid, that too much space is occupied by the logfile, the elder half of the files is deleted if the line count has reached the given number."
notifyUsers1="The package generates desktop notifications, which are shown to configurable user or user group. Names strating with '@' are group names."
runInstallationAgain="You may run the installation again to change the settings!"
ledCtrlHint="If the LEDs indication still an error, you can reset it here:"
btnCopyLedOff="Copy LED OFF"
btnStatusLedGreen="Status LED green"
btnStatusLedOff="Status LED OFF"
btnDelLog="Delete this log file"
btnRefresh="Refresh Page"
btnShowDetailLog="Show detailed log file"
btnShowSimpleLog="Show simple log"
hrefLog="Log of actions"
btnShowLicence="Licence"
btnShowSettings="Show settings"
btnDownload="Download ..."
execLogNA="Logfile not found or empty. Was there already a storage device with a script file in the root folder attached after start of this package?"
copyPriviledge="You can execute the required command <input type='text' size='84' value='sudo cp /var/packages/$SYNOPKG_PKGNAME/conf/privilege.root /var/packages/$SYNOPKG_PKGNAME/conf/privilege'> via SSH <strong>now!</strong> After 'OK' you can then start the package with 'Run'."
scriptAfterNA="Warning: The Skript '$scriptAfterEject', which should be executed after the device eject, could not be found!"
scriptAfterNexec="Warning: The Skript '$scriptAfterEject', which should be executed after the device eject, is not executable!"
msg14="Error: The Skript '$scriptAfterEject', which should be executed, uses the wrong line break CR/LF (Windows). Please use a siutable Editor (Linux oder Windows Notepad++, PSPad, ...) to change it to LF (UNIX)!"
msg15="Error: The Skript '$scriptAfterEject', which should be executed, uses the wrong coding (Windows ISO-8859). Please use a siutable Editor (Linux oder Windows Notepad++, PSPad, ...) to change it to UTF-8!"
msg16="Error: The Skript '$scriptAfterEject', which should be executed, uses the wrong line break CR (MAC). Please use a siutable Editor to change it to LF (UNIX)!"
notifyUserError="The user account '$notyfyUsers' for desktop messages does not exist! Therefore the wrong entry replaced by group '@users'. Run Installation again to enter another value!"
notifyGroupError="The user group '$notyfyUsers' for desktop messages does not exist! Therefore the wrong entry replaced by '@users'. Run Installation again to enter another value!"
update_available="<span style="color:red">A ${app_name} update is available on GitHub.</span> Please update your version ${local_version} to version"
