#!/bin/bash
LOG="/var/log/tmp/$SYNOPKG_PKGNAME.log"
DTFMT="+%Y-%m-%d %H:%M:%S"
user=$(whoami) # EnvVar $USER may be not well set
echo "$(date "$DTFMT"): postinst V$SYNOPKG_PKGVER started as user '$user' ...<br/>" >> "$LOG"
# postinst starts from var/packages/autorun/scripts, not from temporary folder like preupgrade

fields="config_SCRIPT config_SCRIPT_AFTER_EJECT config_ADD_NEW_FINGERPRINTS config_TRIES config_WAIT config_BEEP config_LED config_LED_COPY config_EJECT_TIMEOUT config_LOG_MAX_LINES config_NOTIFY_USERS config_NO_DSM_MESSAGE_RETURN_CODES config_LOGLEVEL"
# config_LED, Status LED usage:
 # 0 = not used,
 # 1 = orange while script is running, green when done,
 # 2 = orange flashing if script result is neither 0 nor 100,
 # 3 = orange while running, flashing if neither 0 nor 100, else green

# config_LED_COPY, Copy LED usage:
 # 0 = not used,
 # 1 = on while script is running, off after end,
 # 2 = flashing while script is running, off after the end,
 # 4 = flashing if script result is neither 0 nor 100,
 # 5 = on while running, flashing if script result is neither 0 nor 100, else off after end.

# config_ADD_NEW_FINGERPRINTS, Security configuration:
 # 0 = unrestricted, no hash check
 # 1 = clear hash list now and register the hash of each newly executed script,
 # 2 = allow only previously registered hashes,
 # 3 = register the new onces
msg=""
if [[ -f "${SYNOPKG_PKGVAR}/config" ]]; then
  # get old version from config file if it's an upgrade or only settings change
  oldVers=$(/bin/get_key_value "${SYNOPKG_PKGVAR}/config" "VERSION")
fi
echo "$(date "$DTFMT"): postinst: oldVers='$oldVers', SYNOPKG_PKGVER='$SYNOPKG_PKGVER'" >> "$LOG"

rm -f "$SYNOPKG_PKGVAR/config"
echo "$(date "$DTFMT"): file pathName: '$SYNOPKG_PKGVAR/config' will be generated now ...<br/>" >> "$LOG"

# Messages (send to $SYNOPKG_TEMP_LOGFILE) are not shown up!? ==> Do the checks in start-stop-status
# If terminated with "exit 1" then the old setting are lost. ==> Do the checks in start-stop-status 
# 1) Is the $config_SCRIPT_AFTER_EJECT file available, and has it correct line break and UTF8-Coding?
# 2) is user or group config_NOTIFY_USERS valid? Check for valid entry requires root access and is done in the start-stop-status script

for f1 in $fields; do
	item="$(env | grep "^$f1=")" # Attention: Some values without quotes
	# eval "$item" # e.g. ", config_NO_DSM_MESSAGE_RETURN_CODES='98'", the ";99" is lost!???
  # msg="$msg, $f1='${!f1}'"  # e.g. ", config_NO_DSM_MESSAGE_RETURN_CODES='98'"
  # f2=${f1#*config_}
  # echo "$f2=\"${!f1}\"" >> "$SYNOPKG_PKGVAR/config"
	key="${item%%=*}"
	val="${item#*=}"
  msg="$msg, $key='$val'"
  f2=${key#*config_}
  echo "$f2=\"${val}\"" >> "$SYNOPKG_PKGVAR/config"
done
echo "$(date "$DTFMT"): from ENV: $msg" >> "$LOG"
if [[ "$config_ADD_NEW_FINGERPRINTS" -eq "1" ]]; then
  KNOWNSCRIPTSFILEPATHNAME="$SYNOPKG_PKGVAR/FINGERPRINTS"
  res=$(rm -f "$KNOWNSCRIPTSFILEPATHNAME")
  ret=$?
  echo "$(date "$DTFMT"): Deletion of old fingerprints: $ret, $res" >> "$LOG"
fi

chmod 755 "$SYNOPKG_PKGVAR/config"
# Distinguish between a) new Installation, b) upgrade or c) change of settings
action="Installation, upgrade or change of settings"

if [[ -z "$oldVers" ]]; then
  action="Installation of V$SYNOPKG_PKGVER"
elif [[ "$oldVers" == "$SYNOPKG_PKGVER" ]]; then
  action="Re-Installation (change of settings) of V$SYNOPKG_PKGVER"
else
  action="Upgrade from V$oldVers to V$SYNOPKG_PKGVER"
fi

if grep -q "^VERSION=" "${SYNOPKG_PKGVAR}/config"; then
  sed "s|^VERSION=.*|VERSION=\"$SYNOPKG_PKGVER\"|" -i "${SYNOPKG_PKGVAR}/config"
  echo "$(date "$DTFMT"): Version $SYNOPKG_PKGVER in '${SYNOPKG_PKGVAR}/config' updated" >> "$LOG"
else
  sed "$ a\VERSION=\"$SYNOPKG_PKGVER\"" -i "${SYNOPKG_PKGVAR}/config"
  echo "$(date "$DTFMT"): Version $SYNOPKG_PKGVER appended to '${SYNOPKG_PKGVAR}/config'" >> "$LOG"
fi

if [[ "$config_ADD_NEW_FINGERPRINTS" -eq "1" ]]; then
  echo "$(date "$DTFMT"): $action done, previously registered script fingerprints deleted" >> "$SYNOPKG_PKGVAR/execLog"
else
  echo "$(date "$DTFMT"): $action done" >> "$SYNOPKG_PKGVAR/execLog"
fi
echo "$(date "$DTFMT"): postinst done, $SYNOPKG_PKGNAME installed<br/>" >> "$LOG"
# next script may be post_upgrade
exit 0

