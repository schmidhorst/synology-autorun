#!/bin/bash
# generate the *.spk file (without the help of the toolkit)

# non-UTF-8 files with international characters and Windows-CR-LF may cause problems. Detect such files ...
# recursive calls for sub directories
checkCoding() {
  for f in ${1}*; do
    if [[ -d "$f" ]]; then
      checkCoding ${f}/
    else
      res=$(file -b $f)
      ret=$?
      # echo "  File coding check '$f' result $ret: $res"
      if [[ $res == *"CRLF line terminators"* ]]; then
        echo "  File coding check '$f' result $ret: $res"
        echo "  ######## Windows line terminator need to be converted to Unix! #########"
        ((errCnt=errCnt+1))
      elif [[ "$res" == *"ISO-8859 text"* ]]; then 
        echo "  File coding check '$f' result $ret: $res"
        echo "  ######## Please convert to UTF-8! ##########"
        ((errCnt=errCnt+1))    
      elif [[ "$res" == *"PNG image"* ]]; then 
        echo "  File coding check PNG image '$f' result $ret: $res"
        # are there some PNG formats which need to be converted?
      fi
    fi
  done
}


######################### start ###########################

SCRIPTPATHTHIS="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
PKG_DIR="$SCRIPTPATHTHIS"
cd "$PKG_DIR" 
echo "'$0' started ..."


# non-UTF-8 files with international characters and Windows-CR-LF may cause problems. 
# Detect such files by checking all source files ...
echo "File coding check ..."
checkCoding "$SCRIPTPATHTHIS/" 
echo "... finished file coding check"

# Check for well formed JSON:
errCnt=0
for f1 in package/ui/config package/ui/index.conf conf/priviledge conf/priviledge.root conf/resource WIZARD_UIFILES/install_uifile WIZARD_UIFILES/upgrade_uifile WIZARD_UIFILES/upgrade WIZARD_UIFILES/wizard_*.json
do
  f2="$SCRIPTPATHTHIS/$1$f1"
  if [[ -f "$f2" ]]; then
    res=$(cat "$f2" | python3 -mjson.tool)
    ret=$?
    echo "JSON syntax check '$f2': $ret"
    if [[ "$ret" != 0 ]]; then
      echo "#### !!!!!! JSON syntax error in '$f2'!!!!! #####"
      ((errCnt=errCnt+1))
    fi
  else
    echo "$f2 not found!"
  fi
done


### get the version and the package name from INFO.sh:
if [[ -f "INFO.sh" ]]; then
  line="$(grep -i "VERSION=" "INFO.sh")"
  echo "line with version: '$line'"
  line=${line^^}
  eval $line
  line=$(grep -i "package=" "INFO.sh")  
  line=${line#*package=\"}
  pck=${line%%\"*}  
  # pck=$(grep -i "package=" "INFO.sh" | /bin/sed 's/package=//i' | /bin/sed 's/"//g')
  echo "pck='$pck'"
else
  echo "Error: File INFO.sh not found!"
fi

echo "building V$VERSION of $pck ..."
# echo "Actual working directory is $PKG_DIR"
rm -f "package.tgz"
rm -f "${pck}-$VERSION.spk"

chmod -R 777 package
echo "building package.tgz ..."
tar --exclude="*/@eaDir" --owner=0 --group=0 -czvvf package.tgz -C package/ $pck bin ui common rules udev
path="package/ui/images"
cp -av "$path/icon_64.png" "PACKAGE_ICON.PNG"
p256=""
if [[ -f "$path/icon_256.png" ]]; then
  p256="PACKAGE_ICON_256.PNG"
  cp -av "$path/icon_256.png" "PACKAGE_ICON_256.PNG"
fi
chmod 755 INFO.sh 
if [[ -f INFO.sh ]]; then
  rm -f "INFO"
  echo "Executing now INFO.sh to build INFO file ..."
  source INFO.sh NoToolkitScripts
  chmod 755 INFO
  echo "create_time=\"$(date '+%Y-%m-%d %T')\"" >> INFO
  echo "... INFO.sh done."  
fi
echo "... package.tgz done"

echo "building ${pck}-$VERSION.spk ..."
chmod 700 package.tgz
tar --exclude="*/@eaDir" --owner=0 --group=0 -cvvf "${pck}-$VERSION.spk" INFO CHANGELOG LICENSE* PACKAGE_ICON.PNG $p256 WIZARD_UIFILES conf scripts package.tgz

rm "package.tgz"
rm "INFO"
rm "PACKAGE_ICON.PNG"
rm "PACKAGE_ICON_256.PNG"
# chmod 777 ${pck}-$VERSION.spk
echo "... $0 done, file $SCRIPTPATHTHIS/${pck}-$VERSION.spk generated!"

