#!/bin/bash
# Filename: <lng>/lang.txt - coded in utf-8
# Language variables for cgi pages in the user language
# --------------------------------------------------------------
displaynameINFO="Autorun"
descriptionINFO="Executes a script on external drive (USB / eSATA) when it's connected to the disk station."
LoginRequired="Login Required"
PleaseLogin="Please login as admin first, before using this webpage"
settingsTitle="Actual $app_name Settings:"
logTitleExec="Log of actions (device attachment, script execution and device ejection)"
logTitleDetail="Debug Log of the activities. Actual log level is '$LOGLEVEL'"
settingFingerprint="The with root access executed script is a security risk, especially if it's configured with location on the external storage. Execution can be restricted to scripts matching previously registered SHA256 checksum.<br>0: No restriction. Previously registered checksums are preserved.<br>1: If there are previously registered checksums, they are deleted. The 1st script with it's checksum is registered as allowed checksum.<br>2: All scripts are allowed and there checksums are registered, if not already registered before.<br>3: Only scripts with previously registered checksums are allowed."
settingSecurityWarning="<span style="color:red"><b>Attention:</b></span> Combining script variant a) (script on external USB/eSATA device) with fingerprint setting 0 or 2 can be a critical security risk: Scripts with arbitrary content on the external storage device are executed when plugged in and have access to everything! Plugging it in can be enough to destroy or steal the data on your Synology NAS!"
settingScript="Variant a: The script is located in the root directory of the external storage device and set as executable for the user 'root'. Given is the pure script name without any path or slash.<br>Variant b: The script is given with it's full path and is located on the NAS.<br>It gets the mount point of the device (e.g. /volumeUSB1/usbshare/) as the first parameter (\$1) and the device partition (e.g. usb1p1) as the second (\$2). It needs to be executable for 'root'. For 'root' is in DSM 7 the shell 'ash' used. But /bin/ash may be a link to 'bash' (at least on a DS220+). The script it's started with an empty environment! So no PATH is set. You have to use for each command the full path (e.g. /bin/echo "...", /bin/printf ...). Your script may stop with the exit code 2 if a command is not found due to a missing path. In the first lines of your script, you may use an 'unset PATH' to have in debugging runs of the script the same conditions. Or you add a line like 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/syno/sbin:/usr/syno/bin:/usr/local/sbin:/usr/local/bin' to the beginning of your script."
settingScriptAfter="If the script exits with the exit code 100, then autorun will eject that storage device and afterwards call this 2nd script. This is optional. Typical usage is to power down an HDD with external supply via a smart power adapter."
settingTries="The time (in seconds) how long autorun should search for a mounted drive. Increase this value when you get the 'unable to find mount point' error."
settingWait="An additional wait time (in seconds) after mounting is detected before starting the script. In some cases a few seconds delay is required for proper drive access."
settingBeep="If set to 'true', there is a short beep when a script is found. And a triple long beep in case of an error."
settingLedStatus="The status LED can be used to show the script status.<br>0: The status LED is used by this package.<br>1: 1: Green while running, green flashing during eject, OFF if finished with 0 or 100, orange flashing for other results or failed eject<br/>2: Green flashing while script is running or ejecting, green if finished with 0 or 100, orange flashing for other results or failed eject<br/>3: Green while script is running and during eject, OFF when finished, orange flashing if ejection failed."
settingLedCopy="The status LED can also be used to show the script status.<br>0: The copy LED is used by this package.<br>1: ON while running or ejecting, OFF afterwards<br/>2: Flashing while running or ejecting, OFF afterwards<br/>3: ON while running or ejecting, afterwards OFF (0/100) or flashing (other codes)<br/>4: Flashing while running or ejecting, afterwards OFF or flashing (other codes or ejection failing)<br/>5: Flashing while running or ejection, afterwards OFF (0/100) or ON (other codes or ejectionFail)"
settingNoDsmMessageReturnCodes="Normally there is a DSM desktop message generated after your script is finished. The message contains the return code of your script and the remaining free space on the storage device. If your script exits with one of the codes given here, then no such message is generated. A entry in the logfile of the package is still generated."
ledResetHint="Depending on the LED settings, the LEDs on the device may indicate an error condition after the script ends. With the command <span style=\"font-family:'Courier New'\" translate='no'>echo \8 \ 4 \B> /dev/ttyS1</span>, executed as '<span translate='no'>root</span>', the normal state can be restored. You may create a scheduled task in the control panel for a custom script for the <span translate='no'>root</span> user with the run command <span style=\"font-family:'Courier New'\" translate='no'>echo \8 \ 4 \B> /dev/ttyS1</span> (8: Status LED green, 4: Power LED on, B: Copy LED off). And run that if it's necessary to reset the LEDs."
settingEjectTimeout="If in case of exit code 100 the external drive cannot be ejected (as it's busy), this gives the timeout in seconds before terminating ejection tries with error."
settingLogMaxLines="To avoid, that too much space is occupied by the logfiles, the elder half of the files is deleted if the line count has reached the given number."
settingLogVerbose="Several detail levels are available for writing messages to the debug log file: 1 ... 8. The higher the value the more details."
settingNotifyUsers="The package generates desktop notifications, which are shown to a configurable user or user group. A name starting with '@' is a group name."
settingHeadlineFingerprints="Currently registered SHA256 checksums (fingerprints) of script files:"
runInstallationAgain="You may run the installation again to change the settings or to delete the checksums!"
ledCtrlHint="If the LEDs indication still an error, you can reset it here:"
btnCopyLedOff="Copy LED OFF"
btnStatusLedGreen="Status LED green"
btnStatusLedOff="Status LED OFF"
btnDelLog="Delete this log file"
btnRefresh="Refresh Page"
btnShowDetailLog="Show detailed debug log file"
btnShowSimpleLog="Show simple log"
hrefLog="Log of actions"
btnShowLicence="Licence"
btnShowSettings="Show settings"
btnDownload="Download ..."
execLogNA="Logfile not found or empty. Was there already a storage device with a script file in the root folder attached after start of this package?"
HASH_DELETION="<b>Previous registered hashes are all deleted now.</b> "
copyPriviledge="You can execute the required command <input type='text' size='80' value='sudo cp /var/packages/$SYNOPKG_PKGNAME/conf/privilege.root /var/packages/$SYNOPKG_PKGNAME/conf/privilege'> via SSH (or scheduled task)<strong>now!</strong> After 'OK' you can then start the package with 'Run'."
scriptNA="Error: The Script '$f' could not be found!"
scriptNAcase="Suspicious: File with different upper/lower case found!"
setupCorrection="Possibly you need to run the installation again to correct the setting!"
scriptNexec="Error: The Script '$f' is not executable!"
wrongLineBreakWin="Error: The Script '$f', which should be executed, uses the wrong line break CR/LF (Windows). Please use a suitable Editor (Linux or Windows Notepad++, PSPad, ...) to change it to LF (UNIX)!"
wrongCodePage="Error: The Script '$f', which should be executed, uses the wrong coding (Windows ISO-8859). Please use a suitable Editor (Linux or Windows Notepad++, PSPad, ...) to change it to UTF-8!"
wrongLineBreakMac="Error: The Script '$f', which should be executed, uses the wrong line break CR (MAC). Please use a suitable Editor to change it to LF (UNIX)!"
notifyUserError="The user account '$notyfyUsers' for desktop messages does not exist! Therefore the wrong entry replaced by group '@users'. Run Installation again to enter another value!"
notifyGroupError="The user group '$notyfyUsers' for desktop messages does not exist! Therefore the wrong entry replaced by '@users'. Run Installation again to enter another value!"
update_available="<span style='color:red'>A ${app_name} update is available on GitHub.</span> Please update your version ${local_version} to version"
txtAlertOnlyAdmin="Access is allowed only for members od the administrators group"
txtLanguageSource="The language of this page was selected according to your webbrowser regional settings."
preinstDsmVersError="This package version can only be used in DSM ${osMin} and above! Earlier package versions may be possible on your DSM version, see <a target='_blank' rel='noopener noreferrer' href='https://github.com/reidemei/synology-autorun#install'>https://github.com/reidemei/synology-autorun#install</a>"

